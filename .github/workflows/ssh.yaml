name: CI/CD Pipeline with Docker and GitOps # 더 명확한 워크플로우 이름
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image # Docker 이미지 빌드/푸시 작업
    runs-on: self-hosted
    steps:
      # 소스코드 체크아웃
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Docker 레지스트리 로그인
      - name: Authenticate with Docker Registry
        run: docker login ${{ secrets.DOCKER_REGISTRY_URL }} -u ${{ secrets.DOCKER_REGISTRY_USER }} -p${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      # Docker 이미지 빌드 - commit hash를 태그로 사용
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      # 빌드된 이미지를 레지스트리에 푸시
      - name: Push to Registry
        run: docker push ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  push:
    name: Update Kubernetes Manifest # GitOps를 위한 매니페스트 업데이트 작업
    runs-on: self-hosted
    needs: build # build 작업 완료 후 실행
    steps:
      # YAML 처리를 위한 yq 설치
      - name: Install YAML processor
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      # 매니페스트의 이미지 태그 업데이트
      - name: Update Deployment Manifest
        run: |
          yq e ".spec.template.spec.containers[0].image = \"${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}\"" -i deploy/nginx-deployment.yaml

      # 변경사항 커밋 및 푸시
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "devops@gmail.com"
          git config --global user.name "devops"
          git add deploy/*
          git diff --cached --quiet || git commit -m "UPDATE :: Updated image to ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
          git push origin main

  # ArgoCD 자동 동기화 설정 (선택사항 - Not Auto Sync)
  # deploy:
  #   name: Deploy to Kubernetes Cluster # K8s 클러스터 배포 작업
  #   runs-on: self-hosted
  #   needs: build-and-push
  #   steps:
  #     - name: Sync ArgoCD Application
  #       run: |
  #         argocd app sync my-app \
  #           --server ${{ secrets.ARGOCD_SERVER }} \
  #           --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }} \
  #           --revision ${GITHUB_SHA}
